````bash
# Prompt para a IA do Replit:

/* Replit AI: Crie um projeto **full‑stack** usando **HTML, CSS e JavaScript puros** (sem frameworks) integrado ao **Supabase** para um portal de diaristas e trabalhadores domésticos em Angola. O site deve conter:

1. **Autenticação** (Supabase Auth via JS SDK):
   - Registro e login por e‑mail e senha.
   - CRUD completo de perfil do usuário (diaristas ou contratantes).
   - Opção de excluir a própria conta e todos os dados.

2. **Modelo de dados em Supabase**:
   - Tabela “users” com campos:
     • `id` (UUID)  
     • `name` (string)  
     • `email` (string, único)  
     • `phone` (string)  
     • `age` (integer)  
     • `province` (string)  
     • `municipality` (string)  
     • `neighborhood` (string)  
     • `contract_type` (string: “diarista” / “mensal” / “verbal” / “escrito”)  
     • `services` (string[], ex: [“limpeza”, “jardinagem”, …])  
     • `availability` (string, ex: dias e horários)  
     • `profile_url` (string, URL da foto)  
     • `created_at` (timestamp)  
   - Storage “profiles” para fotos de perfil.

3. **Frontend (HTML/CSS/JS)**:
   - **index.html**:
     - Script que pergunta permissão de geolocalização ao carregar.
     - Se aceita, chama `/api/users?lat=&lng=` e lista perfis ordenados por proximidade.
     - Se recusa ou quiser filtrar manual, mostra 3 `<select>` em cascata: Província → Município → Bairro.
   - **layout.css**:
     - Design responsivo (mobile‑first), cores da bandeira de Angola (vermelho, preto e amarelo) usadas de forma equilibrada e profissional, cantos arredondados e sombras suaves.
   - **app.js**:
     - SDK do Supabase inicializado com `createClient()`.
     - Funções JS para:
       * `login()`, `signup()`, `logout()`
       * `fetchUsers({ lat, lng, province, municipality, neighborhood, service, contract_type })`
       * `createUserProfile(data)`, `updateUserProfile(id, data)`, `deleteUserProfile(id)`
       * `uploadProfileImage(file)` retorna URL e salva no storage.
     - Manipulação do DOM para renderizar:
       * Lista de cartões de perfil: foto, nome, serviços, localização aproximada e botão “Ver detalhes”.
       * Modal ou página de detalhes com informações completas e “Entrar em contato” (abre modal com telefone/e‑mail).
       * Formulário de edição de perfil para usuário logado (com todos os campos listados).

4. **Backend simples**:
   - Uma única rota **`/api/proxy`** em JavaScript puro (Node.js no Replit) que:
     - Recebe requisições do frontend e repassa para a API do Supabase (CRUD e armazenamento).
     - Controla CORS e segurança.

5. **Funcionalidades de UX**:
   - Skeleton loaders enquanto dados carregam.
   - Validação de formulários (e‑mail, número de telefone, campos obrigatórios).
   - Feedback visual de sucesso/erro.
   - README com instruções de setup e definição das variáveis de ambiente:
     ```
     SUPABASE_URL=<sua-url>
     SUPABASE_ANON_KEY=<sua-anon-key>
     ```

6. **Estrutura de pastas**:
````

/public
└─ index.html
/css
└─ layout.css
/js
└─ app.js
└─ supabaseClient.js
/api
└─ proxy.js
README.md

```

*/  
```
